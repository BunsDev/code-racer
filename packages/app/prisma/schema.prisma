generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now()) @map("created_at")
  name            String?
  email           String?           @unique
  emailVerified   DateTime?         @map("email_verified")
  image           String?
  averageAccuracy Decimal           @default(0) @db.Decimal(5, 2)
  averageCpm      Decimal           @default(0) @db.Decimal(6, 2)
  role            UserRole          @default(USER)
  bio             String?
  languagesMap    Json?
  topLanguages    String[]
  accounts        Account[]
  achievements    Achievement[]
  notifications   Notification[]
  RaceParticipant RaceParticipant[]
  results         Result[]
  sessions        Session[]
  snippetVotes    SnippetVote[]
  snippets        Snippet[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Result {
  id              String            @id @default(cuid())
  userId          String            @map("user_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  accuracy        Decimal           @db.Decimal(5, 2)
  cpm             Int
  takenTime       String            @map("taken_time")
  errorCount      Int?              @map("error_count")
  snippetId       String
  RaceParticipant RaceParticipant[]
  snippet         Snippet           @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("results")
}

model Achievement {
  userId          String          @map("user_id")
  achievementType AchievementType @map("achievement_type")
  unlockedAt      DateTime        @default(now()) @map("unlocked_at")
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, achievementType])
  @@map("achievements")
}

model Snippet {
  id       String        @id @default(cuid())
  code     String
  language String
  userId   String?       @map("user_id")
  onReview Boolean       @default(false) @map("on_review")
  rating   Int           @default(0)
  name     String?
  Race     Race[]
  Result   Result[]     
  votes    SnippetVote[]
  User     User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("snippets")
}

model Race {
  id           String            @id @default(cuid())
  snippetId    String            @map("snippet_id")
  startedAt    DateTime?         @map("started_at")
  endedAt      DateTime?         @map("ended_at")
  createdAt    DateTime          @default(now()) @map("created_at")
  snippet      Snippet           @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  participants RaceParticipant[]

  @@map("race")
}

model RaceParticipant {
  id       String  @id @default(cuid())
  raceId   String
  userId   String? @map("user_id")
  resultId String? @map("result_id")
  Race     Race    @relation(fields: [raceId], references: [id], onDelete: Cascade)
  result   Result? @relation(fields: [resultId], references: [id], onDelete: Cascade)
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("race_participants")
}

model SnippetVote {
  snippetId String
  userId    String
  type      VoteType
  Snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, snippetId])
  @@map("snippet_votes")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String
  ctaUrl      String?  @map("cta_url")
  read        Boolean  @default(false)
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum UserRole {
  ADMIN
  USER
}

enum AchievementType {
  FIRST_RACE
  FIRST_SNIPPET
  FIFTH_RACE
}

enum VoteType {
  UP
  DOWN
}
